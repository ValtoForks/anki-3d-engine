<!-- 
Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
All rights reserved.
Code licensed under the BSD License.
http://www.anki3d.org/LICENSE
-->
<shaderProgram>
	<inputs>
		<input name="CLUSTER_COUNT_X" type="uint" const="1"/>
		<input name="CLUSTER_COUNT_Y" type="uint" const="1"/>
		<input name="CLUSTER_COUNT_Z" type="uint" const="1"/>
	</inputs>

	<shaders>
		<shader type="vert">
			<source><![CDATA[
#include "shaders/Common.glsl"

layout(location = 0) out vec2 out_uv;
layout(location = 1) out vec2 out_clusterIJ;

out gl_PerVertex
{
	vec4 gl_Position;
};

void main()
{
	out_uv = vec2(gl_VertexID & 1, gl_VertexID >> 1) * 2.0;
	vec2 pos = out_uv * 2.0 - 1.0;
	gl_Position = vec4(pos, 0.0, 1.0);

	out_clusterIJ = vec2(CLUSTER_COUNT_X, CLUSTER_COUNT_Y) * out_uv;
}
			]]></source>
		</shader>

		<shader type="frag">
			<source><![CDATA[
#include "shaders/Pack.glsl"
#include "shaders/Clusterer.glsl"
#include "shaders/Functions.glsl"

#define LIGHT_SET 0
#define LIGHT_SS_BINDING 0
#define LIGHT_UBO_BINDING 0
#define LIGHT_TEX_BINDING 2
#define LIGHT_DECALS
#define LIGHT_COMMON_UNIS
#include "shaders/ClusterLightCommon.glsl"

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_msDepthRt;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2D u_ssaoTex;

layout(location = 0) in vec2 in_uv;
layout(location = 1) in vec2 in_clusterIJ;

layout(location = 0) out vec4 out_color0;
layout(location = 1) out vec4 out_color1;

void main()
{
	// This code blends the diffuse and the specular+rougness of the decals with GBuffer render targets.
	// Normaly the blending is being done ('D' is the decal diffuse and 'f' is decal blend factor):
	// d=gbuffer.diff
	// 1st decal: d'=d*(1-f)+D*f
	// 2nd decal: d''=d'*(1-f')+D'*f' <=> d''=d*(1-f)*(1-f')+D*f*(1-f')+D'*f'
	// By looking at the trend we will have to multiply the gbuffer.diff with: (1-f)*(1-f') ... (1-f'''')

	vec4 outDiffuse = vec4(0.0, 0.0, 0.0, 1.0);
	vec4 outSpecular = vec4(0.0, 0.0, 0.0, 1.0);

	// Sample SSAO
	float ssao = textureLod(u_ssaoTex, in_uv, 0.0).r;
	outDiffuse.a *= ssao;

	// Get worldPos
	float depth = textureLod(u_msDepthRt, in_uv, 0.0).r;
	vec2 ndc = UV_TO_NDC(in_uv);
	vec4 worldPos4 = u_invViewProjMat * vec4(ndc, depth, 1.0);
	vec3 worldPos = worldPos4.xyz / worldPos4.w;

	// Get first light index
	uint idxOffset;
	{
		uint k = computeClusterK(u_clustererMagic, worldPos);
		uint clusterIdx = 
			k * (CLUSTER_COUNT_X * CLUSTER_COUNT_Y) + uint(in_clusterIJ.y) * CLUSTER_COUNT_X + uint(in_clusterIJ.x);

		idxOffset = u_clusters[clusterIdx];
	}

	// Process decals
	uint count = u_lightIndices[idxOffset++];
	if(count == 0 && ssao >= (1.0 - EPSILON))
	{
		discard;
	}

	while(count-- != 0)
	{
		Decal decal = u_decals[u_lightIndices[idxOffset++]];

		// Project pos to decal space
		vec4 texCoords4 = decal.texProjectionMat * vec4(worldPos, 1.0);
		if(texCoords4.w <= 0.7)
		{
			// Behind the decal, skip
			continue;
		}

		vec2 texCoords2 = texCoords4.xy / texCoords4.w;

		// Clamp the tex coords. Expect a border in the texture atlas
		texCoords2 = saturate(texCoords2);
	
		// Read diffuse
		vec2 diffUv = mad(texCoords2, decal.diffUv.zw, decal.diffUv.xy);
		vec4 decalDiff = texture(u_diffDecalTex, diffUv);

		// Read roughness
		vec2 specUv = mad(texCoords2, decal.normRoughnessUv.zw, decal.normRoughnessUv.xy);
		vec3 spec = texture(u_specularRoughnessDecalTex, specUv).rgb;

		// Update diffuse
		float f = decalDiff.a * decal.blendFactors[0];
		outDiffuse.rgb = outDiffuse.rgb * (1.0 - f) + decalDiff.rgb * f;
		outDiffuse.a *= (1.0 - f);

		// Update specular
		f = decalDiff.a * decal.blendFactors[1];
		outSpecular.rgb = outSpecular.rgb * (1.0 - f) + spec.rgb * f;
		outSpecular.a *= (1.0 - f);
	}

	out_color0 = outDiffuse;
	out_color1 = outSpecular;
}
			]]></source>
		</shader>
	</shaders>

</shaderProgram>



