<!-- 
Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
All rights reserved.
Code licensed under the BSD License.
http://www.anki3d.org/LICENSE
-->
<shaderProgram>
	<mutators>
		<mutator name="ENABLE_SHADOWS" values="0 1"/>
	</mutators>

	<shaders>
		<shader type="vert">
			<source><![CDATA[
#include "shaders/QuadVert.glsl"
			]]></source>
		</shader>

		<shader type="frag">
			<inputs>
				<input name="FB_SIZE" type="uvec2" const="1"/>
				<input name="CLUSTER_COUNT" type="uvec3" const="1"/>
				<input name="NOISE_MAP_SIZE" type="uint" const="1"/>
			</inputs>

			<source><![CDATA[
#include "shaders/Common.glsl"
#include "shaders/Functions.glsl"
#include "shaders/Clusterer.glsl"

#define LIGHT_TEX_BINDING 3
#define LIGHT_UBO_BINDING 0
#define LIGHT_SS_BINDING 0
#define LIGHT_SET 0
#define LIGHT_LIGHTS
#define LIGHT_COMMON_UNIS
#include "shaders/ClusterLightCommon.glsl"

layout(location = 0) in vec2 in_uv;

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_msDepthRt;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2DArray u_noiseTex;
layout(ANKI_TEX_BINDING(0, 2)) uniform sampler2D u_historyRt;

layout(std140, ANKI_UBO_BINDING(0, 3), row_major) uniform ubo0_
{
	vec4 u_linearizeNoiseTexOffsetLayer;
	vec4 u_fogParticleColorPad1;
	mat4 u_prevViewProjMatMulInvViewProjMat2; // TODO Light common ubo has that. Maybe remove it
};

#define u_linearize readFirstInvocationARB(u_linearizeNoiseTexOffsetLayer.xy)
#define u_noiseYOffset readFirstInvocationARB(u_linearizeNoiseTexOffsetLayer.z)
#define u_noiseLayer readFirstInvocationARB(u_linearizeNoiseTexOffsetLayer.w)
#define u_fogParticleColor readFirstInvocationARB(u_fogParticleColorPad1.rgb)

layout(location = 0) out vec3 out_color;

const uint MAX_SAMPLES_PER_CLUSTER = 4u;
const float DIST_BETWEEN_SAMPLES = 0.25;
const float HISTORY_FEEDBACK = 1.0 / 16.0;

// Return the diffuse color without taking into account the diffuse term of the particles.
vec3 computeLightColor(vec3 fragPos, uint plightCount, uint plightIdx, uint slightCount, uint slightIdx)
{
	vec3 outColor = vec3(0.0);

	// Point lights
	while(plightCount-- != 0)
	{
		PointLight light = u_pointLights[u_lightIndices[plightIdx++]];
		vec3 frag2Light = light.posRadius.xyz - fragPos;
		float factor = computeAttenuationFactor(light.posRadius.w, frag2Light);

#if ENABLE_SHADOWS
		if(light.diffuseColorTileSize.w >= 0.0)
		{
			factor *= computeShadowFactorOmni(frag2Light, 
				light.radiusPad3.x, 
				light.atlasTilesPad2.xy,
				light.diffuseColorTileSize.w,
				u_shadowTex);
		}
#endif

		outColor += light.diffuseColorTileSize.rgb * factor;
	}

	// Spot lights
	while(slightCount-- != 0)
	{
		SpotLight light = u_spotLights[u_lightIndices[slightIdx++]];
		vec3 frag2Light = light.posRadius.xyz - fragPos;
		float factor = computeAttenuationFactor(light.posRadius.w, frag2Light);

		vec3 l = normalize(frag2Light);

		factor *= computeSpotFactor(l, light.outerCosInnerCos.x, light.outerCosInnerCos.y, light.lightDirRadius.xyz);

#if ENABLE_SHADOWS
		float shadowmapLayerIdx = light.diffuseColorShadowmapId.w;
		if(shadowmapLayerIdx >= 0.0)
		{
			factor *= computeShadowFactorSpot(
				light.texProjectionMat, fragPos, light.lightDirRadius.w, u_shadowTex);
		}
#endif

		outColor += light.diffuseColorShadowmapId.rgb * factor;
	}

	return outColor;
}

vec3 readHistory(vec3 ndc, out float historyFeedback)
{
	vec4 v4 = u_prevViewProjMatMulInvViewProjMat2 * vec4(ndc, 1.0);
	v4.xy /= v4.w;

	vec2 oldUv = NDC_TO_UV(v4.xy);
	vec3 history = textureLod(u_historyRt, oldUv, 0.0).rgb;

	// Compute the history blend. If clip falls outside NDC then it's 1.0 (use only current fog term) and if it's
	// inside NDC then use the HISTORY_FEEDBACK value
	vec2 posNdc = abs(v4.xy);
	historyFeedback = max(posNdc.x, posNdc.y);
	historyFeedback = min(floor(historyFeedback), 1.0 - HISTORY_FEEDBACK);
	historyFeedback += HISTORY_FEEDBACK;

	return history;
}

void main()
{
	float depth = textureLod(u_msDepthRt, in_uv, 0.0).r;

	vec3 ndc = vec3(UV_TO_NDC(in_uv), depth);

	vec3 farPos;
	farPos.z = u_unprojectionParams.z / (u_unprojectionParams.w + depth);
	farPos.xy = ndc.xy * u_unprojectionParams.xy * farPos.z;
	vec3 viewDir = normalize(farPos);

	uint i = uint(in_uv.x * float(CLUSTER_COUNT.x));
	uint j = uint(in_uv.y * float(CLUSTER_COUNT.y));
	uint ij = j * CLUSTER_COUNT.x + i;

	vec3 noiseTexUv = vec3(vec2(FB_SIZE) / vec2(NOISE_MAP_SIZE) * in_uv + vec2(0.0, u_noiseYOffset), u_noiseLayer);
	float randFactor = clamp(texture(u_noiseTex, noiseTexUv).r, EPSILON, 1.0 - EPSILON);

	float kNear = -u_near;
	vec3 newCol = vec3(0.0);
	for(uint k = 0u; k < CLUSTER_COUNT.z; ++k)
	{
		float kFar = -computeClusterFar(u_clustererMagic, k);

		//
		// Compute sample count
		//
		float diff = kNear - kFar;
		float samplesf = clamp(diff / DIST_BETWEEN_SAMPLES, 1.0, float(MAX_SAMPLES_PER_CLUSTER));
		float dist = 1.0 / samplesf;
		float start = dist * randFactor;

		//
		// Find index ranges
		//
		uint clusterIdx = k * (CLUSTER_COUNT.x * CLUSTER_COUNT.y) + ij;
		uint idxOffset = u_clusters[clusterIdx];

		// Skip decals
		uint count = u_lightIndices[idxOffset];
		idxOffset += count + 1;

		uint plightCount = u_lightIndices[idxOffset++];
		uint plightIdx = idxOffset;
		idxOffset += plightCount;

		uint slightCount = u_lightIndices[idxOffset++];
		uint slightIdx = idxOffset;

		for(float factor = start; factor <= 1.0; factor += dist)
		{
			float zMedian = mix(kNear, kFar, factor);

			if(zMedian < farPos.z)
			{
				k = CLUSTER_COUNT.z; // Break the outer loop
				break;
			}

			vec3 fragPos = viewDir * (zMedian / viewDir.z);

			// Move to world space
			vec4 newWorldPos4 = u_invViewMat * vec4(fragPos, 1.0);

			newCol += computeLightColor(newWorldPos4.xyz, plightCount, plightIdx, slightCount, slightIdx);
		}

		kNear = kFar;
	}

	newCol *= diffuseLambert(u_fogParticleColor);

	// Read history
	float historyFeedback;
	vec3 history = readHistory(ndc, historyFeedback);
	
	// Fix ghosting
	history = max(history, newCol);

	// Blend
	out_color = mix(history, newCol, historyFeedback);
}
			]]></source>
		</shader>
	</shaders>

</shaderProgram>



