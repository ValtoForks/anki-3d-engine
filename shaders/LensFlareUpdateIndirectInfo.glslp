// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki input const Vec2 IN_DEPTH_MAP_SIZE

#pragma anki start comp
#include <shaders/Common.glsl>

const U32 WORKGROUP_SIZE = 8;
layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct DrawArraysIndirectInfo
{
	U32 count;
	U32 instanceCount;
	U32 first;
	U32 baseInstance;
};

layout(ANKI_SS_BINDING(0, 0), std430, row_major) readonly buffer ss0_
{
	Mat4 u_mvp;
	Vec4 u_flarePositions[];
};

layout(ANKI_SS_BINDING(0, 1), std430) writeonly buffer ss1_
{
	DrawArraysIndirectInfo u_indirectInfo[];
};

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_depthMap;

shared U32 s_maxDepth;

void main()
{
	// Init the s_maxDepth
	if(gl_LocalInvocationIndex == 0)
	{
		s_maxDepth = 0;
	}
	memoryBarrierShared();
	barrier();

	// Project the flare
	U32 flareIdx = gl_WorkGroupID.x;
	Vec4 posClip = u_mvp * u_flarePositions[flareIdx];
	Vec3 posNdc = posClip.xyz / posClip.w;
	F32 depth = posNdc.z;

	// Compute the UVs to sample the depth map
	Vec2 displacement = Vec2(gl_LocalInvocationID.xy) - Vec2(WORKGROUP_SIZE / 2u); // [-WORKGROUP_SIZE, WORKGROUP_SIZE]
	const Vec2 TEXEL_SIZE = 1.0 / IN_DEPTH_MAP_SIZE;
	Vec2 uv = NDC_TO_UV(posNdc.xy) + displacement * TEXEL_SIZE;

	// Sample and store depth
	F32 refDepth = textureLod(u_depthMap, uv, 0.0).r;
	atomicMax(s_maxDepth, U32(refDepth * F32(MAX_U32)));

	// Sync
	memoryBarrierShared();
	barrier();

	if(gl_LocalInvocationIndex == 0)
	{
		F32 refDepth = F32(s_maxDepth) / F32(MAX_U32);
		u_indirectInfo[flareIdx].count = (depth > refDepth) ? 0u : 4u;

		u_indirectInfo[flareIdx].instanceCount = 1u;
		u_indirectInfo[flareIdx].first = 0u;
		u_indirectInfo[flareIdx].baseInstance = 0u;
	}
}
#pragma anki end
