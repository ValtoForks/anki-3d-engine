// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki input const UVec2 INPUT_TEX_SIZE

#pragma anki start comp
#define LOG_AVG 0

#include <shaders/Common.glsl>
#include <shaders/Tonemapping.glsl>

const UVec2 PREFERABLE_WG_SIZE = UVec2(32u, 32u);

// Find a WG size that is dividable to the input tex size
const UVec2 WORKGROUP_SIZE = INPUT_TEX_SIZE / ((INPUT_TEX_SIZE + PREFERABLE_WG_SIZE - 1u) / PREFERABLE_WG_SIZE);
const U32 WG_SIZE = WORKGROUP_SIZE.x * WORKGROUP_SIZE.y;

const UVec2 TRIMMED_INPUT_TEX_SIZE = (INPUT_TEX_SIZE / WORKGROUP_SIZE) * WORKGROUP_SIZE;

layout(local_size_x = WORKGROUP_SIZE.x, local_size_y = WORKGROUP_SIZE.y, local_size_z = 1) in;

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_tex;

#define TONEMAPPING_RESOURCE_AS_BUFFER 1
#include <shaders/TonemappingResources.glsl>

shared F32 s_avgLum[WG_SIZE];

void main()
{
	// Gather the log-average luminance of a tile. It will miss some pixels but not too many
	const U32 PIXEL_READ_X = TRIMMED_INPUT_TEX_SIZE.x / WORKGROUP_SIZE.x;
	const U32 PIXEL_READ_Y = TRIMMED_INPUT_TEX_SIZE.y / WORKGROUP_SIZE.y;

	U32 yStart = gl_LocalInvocationID.y * PIXEL_READ_Y;
	U32 xStart = gl_LocalInvocationID.x * PIXEL_READ_X;

	F32 avgLum = 0.0;
	ANKI_UNROLL for(U32 y = 0; y < PIXEL_READ_Y; ++y)
	{
		ANKI_UNROLL for(U32 x = 0; x < PIXEL_READ_X; ++x)
		{
			IVec2 uv = IVec2(xStart, yStart) + IVec2(x, y);
			Vec3 color = texelFetch(u_tex, uv, 0).rgb;
			F32 lum = computeLuminance(color);
#if LOG_AVG
			avgLum += log(max(EPSILON, lum));
#else
			avgLum += lum;
#endif
		}
	}

	s_avgLum[gl_LocalInvocationIndex] = avgLum;

	memoryBarrierShared();
	barrier();

	// Gather the results into one
	ANKI_LOOP for(U32 s = WG_SIZE / 2u; s > 0u; s >>= 1u)
	{
		if(gl_LocalInvocationIndex < s)
		{
			s_avgLum[gl_LocalInvocationIndex] += s_avgLum[gl_LocalInvocationIndex + s];
		}

		memoryBarrierShared();
		barrier();
	}

	// Write the result
	ANKI_BRANCH if(gl_LocalInvocationIndex == 0u)
	{
#if LOG_AVG
		F32 crntLum = exp(s_avgLum[0] * (1.0 / F32(TRIMMED_INPUT_TEX_SIZE.x * TRIMMED_INPUT_TEX_SIZE.y)));
#else
		F32 crntLum = s_avgLum[0] * (1.0 / F32(TRIMMED_INPUT_TEX_SIZE.x * TRIMMED_INPUT_TEX_SIZE.y));
#endif

#if 1
		F32 prevLum = u_averageLuminance;

		// Lerp between previous and new L value
		const F32 INTERPOLATION_FACTOR = 0.05;
		F32 finalAvgLum = mix(prevLum, crntLum, INTERPOLATION_FACTOR);
#else
		F32 finalAvgLum = crntLum;
#endif

		// This is a workaround because sometimes the avg lum becomes nan
		finalAvgLum = clamp(finalAvgLum, EPSILON, FLT_MAX);

		u_averageLuminance = finalAvgLum;
		u_exposureThreshold0 = computeExposure(u_averageLuminance, 0.0);
	}
}
#pragma anki end
