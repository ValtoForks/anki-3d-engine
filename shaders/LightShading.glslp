// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki input const U32 CLUSTER_COUNT_X
#pragma anki input const U32 CLUSTER_COUNT_Y
#pragma anki input const U32 CLUSTER_COUNT_Z
#pragma anki input const U32 CLUSTER_COUNT
#pragma anki input const U32 IR_MIPMAP_COUNT

#pragma anki start vert
#include <shaders/Common.glsl>

layout(location = 0) out Vec2 out_uv;
layout(location = 1) out Vec2 out_clusterIJ;

out gl_PerVertex
{
	Vec4 gl_Position;
};

void main()
{
	out_uv = Vec2(gl_VertexID & 1, gl_VertexID >> 1) * 2.0;
	Vec2 pos = out_uv * 2.0 - 1.0;
	gl_Position = Vec4(pos, 0.0, 1.0);

	out_clusterIJ = Vec2(CLUSTER_COUNT_X, CLUSTER_COUNT_Y) * out_uv;
}
#pragma anki end

#pragma anki start frag
#include <shaders/Pack.glsl>
#include <shaders/Functions.glsl>

#define LIGHT_SET 0
#define LIGHT_SS_BINDING 0
#define LIGHT_UBO_BINDING 0
#define LIGHT_TEX_BINDING 6
#define LIGHT_INDIRECT
#define LIGHT_LIGHTS
#define LIGHT_COMMON_UNIS
#include <shaders/ClusteredShadingCommon.glsl>

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_msRt0;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2D u_msRt1;
layout(ANKI_TEX_BINDING(0, 2)) uniform sampler2D u_msRt2;
layout(ANKI_TEX_BINDING(0, 3)) uniform sampler2D u_msDepthRt;
layout(ANKI_TEX_BINDING(0, 4)) uniform sampler2D u_ssrRt;
layout(ANKI_TEX_BINDING(0, 5)) uniform sampler2D u_ssaoRt;

layout(location = 0) in Vec2 in_uv;
layout(location = 1) in Vec2 in_clusterIJ;

layout(location = 0) out Vec3 out_color;

const F32 SUBSURFACE_MIN = 0.05;

// Note: All calculations in world space
void readReflectionsAndIrradianceFromProbes(U32 idxOffset,
	Vec3 worldPos,
	Vec3 normal,
	Vec3 viewDir,
	F32 roughness,
	out Vec3 specIndirect,
	out Vec3 diffIndirect)
{
	specIndirect = Vec3(0.0);
	diffIndirect = Vec3(0.0);

	Vec3 reflDir = reflect(-viewDir, normal);
	F32 reflLod = F32(IR_MIPMAP_COUNT - 1u) * roughness;
	F32 totalBlendWeight = EPSILON;

	// Check proxy
	U32 idx;
	ANKI_LOOP while((idx = u_lightIndices[idxOffset++]) != MAX_U32)
	{
		ReflectionProbe probe = u_reflectionProbes[idx];
		Vec3 aabbMin = probe.m_aabbMinPad1.xyz;
		Vec3 aabbMax = probe.m_aabbMaxPad1.xyz;
		Vec3 probeOrigin = probe.m_positionCubemapIndex.xyz;
		F32 cubemapIndex = probe.m_positionCubemapIndex.w;

		// Compute blend weight
		F32 blendWeight = computeProbeBlendWeight(worldPos, aabbMin, aabbMax, 0.2);
		totalBlendWeight += blendWeight;

		// Sample reflections
		Vec3 cubeUv = intersectProbe(worldPos, reflDir, aabbMin, aabbMax, probeOrigin);
		Vec3 c = textureLod(u_reflectionsTex, Vec4(cubeUv, cubemapIndex), reflLod).rgb;
		specIndirect += c * blendWeight;

		// Sample irradiance
		cubeUv = intersectProbe(worldPos, normal, aabbMin, aabbMax, probeOrigin);
		c = textureLod(u_irradianceTex, Vec4(cubeUv, cubemapIndex), 0.0).rgb;
		diffIndirect += c * blendWeight;
	}

	// Normalize the colors
	specIndirect /= totalBlendWeight;
	diffIndirect /= totalBlendWeight;
}

// Common code for lighting
#define LIGHTING_COMMON_BRDF() \
	Vec3 frag2Light = light.m_posRadius.xyz - worldPos; \
	Vec3 l = normalize(frag2Light); \
	Vec3 specC = computeSpecularColorBrdf(gbuffer, viewDir, l); \
	Vec3 diffC = diffuseLambert(gbuffer.m_diffuse); \
	F32 att = computeAttenuationFactor(light.m_posRadius.w, frag2Light); \
	F32 lambert = max(0.0, dot(gbuffer.m_normal, l));

void main()
{
	F32 depth = textureLod(u_msDepthRt, in_uv, 0.0).r;
	Vec2 ndc = UV_TO_NDC(in_uv);

	// Get world position
	Vec4 worldPos4 = u_invViewProjMat * Vec4(ndc, depth, 1.0);
	Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	// Get first light index
	U32 idxOffset;
	{
		U32 k = computeClusterK(u_clustererMagic, worldPos);
		U32 clusterIdx =
			k * (CLUSTER_COUNT_X * CLUSTER_COUNT_Y) + U32(in_clusterIJ.y) * CLUSTER_COUNT_X + U32(in_clusterIJ.x);

		idxOffset = u_clusters[clusterIdx];

		// out_color = lightHeatmap(idxOffset, 5, false, false, false, false, true); return;
	}

	// Decode GBuffer
	GbufferInfo gbuffer;
	readGBuffer(u_msRt0, u_msRt1, u_msRt2, in_uv, 0.0, gbuffer);
	gbuffer.m_subsurface = max(gbuffer.m_subsurface, SUBSURFACE_MIN);

	// SSAO
	F32 ssao = textureLod(u_ssaoRt, in_uv, 0.0).r;
	gbuffer.m_diffuse *= ssao;

	// Ambient and emissive color
	out_color = gbuffer.m_diffuse * gbuffer.m_emission;

	// Point lights
	Vec3 viewDir = normalize(u_cameraPos - worldPos);
	U32 idx;
	ANKI_LOOP while((idx = u_lightIndices[idxOffset++]) != MAX_U32)
	{
		PointLight light = u_pointLights[idx];

		LIGHTING_COMMON_BRDF();

		ANKI_BRANCH if(light.m_diffuseColorTileSize.w >= 0.0)
		{
			F32 shadow = computeShadowFactorOmni(
				frag2Light, light.m_radiusPad1.x, light.m_atlasTiles, light.m_diffuseColorTileSize.w, u_shadowTex);
			lambert *= shadow;
		}

		out_color += (diffC + specC) * light.m_diffuseColorTileSize.rgb * (att * max(gbuffer.m_subsurface, lambert));
	}

	// Spot lights
	ANKI_LOOP while((idx = u_lightIndices[idxOffset++]) != MAX_U32)
	{
		SpotLight light = u_spotLights[idx];

		LIGHTING_COMMON_BRDF();

		F32 spot =
			computeSpotFactor(l, light.m_outerCosInnerCos.x, light.m_outerCosInnerCos.y, light.m_lightDirRadius.xyz);

		F32 shadowmapLayerIdx = light.m_diffuseColorShadowmapId.w;
		ANKI_BRANCH if(shadowmapLayerIdx >= 0.0)
		{
			F32 shadow =
				computeShadowFactorSpot(light.m_texProjectionMat, worldPos, light.m_lightDirRadius.w, u_shadowTex);
			lambert *= shadow;
		}

		out_color +=
			(diffC + specC) * light.m_diffuseColorShadowmapId.rgb * (att * spot * max(gbuffer.m_subsurface, lambert));
	}

	// Refl & indirect
	{
		// Do the probe read
		Vec3 envColor;
		Vec3 indirectColor;
		readReflectionsAndIrradianceFromProbes(
			idxOffset, worldPos, gbuffer.m_normal, viewDir, gbuffer.m_roughness, envColor, indirectColor);

		// Read the SSL result
		Vec4 ssr = textureLod(u_ssrRt, in_uv, 0.0);

		// Combine the SSR and probe reflections and write the result
		Vec3 finalRefl = envColor * ssr.a + ssr.rgb;

		// Compute env BRDF
		F32 NoV = max(EPSILON, dot(gbuffer.m_normal, viewDir));
		Vec3 env = envBRDF(gbuffer.m_specular, gbuffer.m_roughness, u_integrationLut, NoV);

		out_color += indirectColor * gbuffer.m_diffuse + finalRefl * env;
	}
}
#pragma anki end
