// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// Screen space lens flare. Used the technique from here
// http://john-chapman-graphics.blogspot.no/2013/02/pseudo-lens-flare.html

#pragma anki input const UVec2 INPUT_TEX_SIZE

#pragma anki start vert
#include <shaders/QuadVert.glsl>
#pragma anki end

#pragma anki start frag
#include <shaders/Common.glsl>

#define MAX_GHOSTS 4
#define GHOST_DISPERSAL (0.7)
#define HALO_WIDTH 0.4
#define CHROMATIC_DISTORTION 3.0
#define ENABLE_CHROMATIC_DISTORTION 1
#define ENABLE_HALO 1
#define HALO_OPACITY 0.5

layout(location = 0) in Vec2 in_texCoord;

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_rt;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2D u_lensDirtTex;

layout(location = 0) out Vec3 out_color;

Vec3 textureDistorted(in sampler2D tex,
	in Vec2 texcoord,
	in Vec2 direction, // direction of distortion
	in Vec3 distortion) // per-channel distortion factor
{
#if ENABLE_CHROMATIC_DISTORTION
	return Vec3(texture(tex, texcoord + direction * distortion.r).r,
		texture(tex, texcoord + direction * distortion.g).g,
		texture(tex, texcoord + direction * distortion.b).b);
#else
	return texture(tex, texcoord).rgb;
#endif
}

void main()
{
	Vec2 texcoord = Vec2(1.0) - in_texCoord;

	Vec2 ghostVec = (Vec2(0.5) - texcoord) * GHOST_DISPERSAL;

	const Vec2 texelSize = 1.0 / Vec2(INPUT_TEX_SIZE);

	const Vec3 distortion = Vec3(-texelSize.x * CHROMATIC_DISTORTION, 0.0, texelSize.x * CHROMATIC_DISTORTION);

	const F32 lenOfHalf = length(Vec2(0.5));

	Vec2 direction = normalize(ghostVec);

	Vec3 result = Vec3(0.0);

	// sample ghosts:
	for(I32 i = 0; i < MAX_GHOSTS; ++i)
	{
		Vec2 offset = fract(texcoord + ghostVec * F32(i));

		F32 weight = length(Vec2(0.5) - offset) / lenOfHalf;
		weight = pow(1.0 - weight, 10.0);

		result += textureDistorted(u_rt, offset, direction, distortion) * weight;
	}

// sample halo
#if ENABLE_HALO
	Vec2 haloVec = normalize(ghostVec) * HALO_WIDTH;
	F32 weight = length(Vec2(0.5) - fract(texcoord + haloVec)) / lenOfHalf;
	weight = pow(1.0 - weight, 20.0);
	result += textureDistorted(u_rt, texcoord + haloVec, direction, distortion) * (weight * HALO_OPACITY);
#endif

	// lens dirt
	result *= texture(u_lensDirtTex, in_texCoord).rgb;

	// Write
	out_color = result;
}
#pragma anki end
