// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki input const UVec2 FB_SIZE
#pragma anki input const UVec2 WORKGROUP_SIZE

#pragma anki start comp
#include <shaders/Common.glsl>
#include <shaders/Tonemapping.glsl>

layout(local_size_x = WORKGROUP_SIZE.x, local_size_y = WORKGROUP_SIZE.y, local_size_z = 1) in;

// Vars
layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_tex; ///< Its the IS RT

layout(ANKI_UBO_BINDING(0, 0), std140) uniform u0_
{
	Vec4 u_thresholdScalePad2;
};

layout(ANKI_SS_BINDING(0, 0), std140) readonly buffer ss0_
{
	Vec4 u_averageLuminancePad3;
};

layout(ANKI_IMAGE_BINDING(0, 0)) writeonly uniform image2D out_img;

void main()
{
	if((FB_SIZE.x % WORKGROUP_SIZE.x) != 0u || (FB_SIZE.y % WORKGROUP_SIZE.y) != 0u) // This check is free
	{
		if(gl_GlobalInvocationID.x >= FB_SIZE.x || gl_GlobalInvocationID.y >= FB_SIZE.y)
		{
			return;
		}
	}

	Vec2 uv = (Vec2(gl_GlobalInvocationID.xy) + 0.5) / Vec2(FB_SIZE);

	Vec3 color = textureLod(u_tex, uv, 0.0).rgb;
	color += textureLodOffset(u_tex, uv, 0.0, ivec2(+1, +1)).rgb;
	color += textureLodOffset(u_tex, uv, 0.0, ivec2(-1, -1)).rgb;
	color += textureLodOffset(u_tex, uv, 0.0, ivec2(-1, +1)).rgb;
	color += textureLodOffset(u_tex, uv, 0.0, ivec2(+1, -1)).rgb;

	color *= (1.0 / 5.0);

	color = tonemap(color, u_averageLuminancePad3.x, u_thresholdScalePad2.x) * u_thresholdScalePad2.y;

	imageStore(out_img, IVec2(gl_GlobalInvocationID.xy), Vec4(color, 0.0));
}
#pragma anki end
