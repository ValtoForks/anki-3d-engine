// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki descriptor_set 1

#pragma anki mutator ANIMATED_TEXTURE 0 1
#pragma anki mutator LIGHT 0 1

#pragma anki input Mat4 mvp
#pragma anki input Mat3 cameraRotMat

#pragma anki input sampler2D diffuseMap "ANIMATED_TEXTURE == 0"
#pragma anki input sampler2DArray diffuseMapArr "ANIMATED_TEXTURE == 1"
#pragma anki input const F32 animationPeriod "ANIMATED_TEXTURE == 1"
#pragma anki input const Vec4 colorScale
#pragma anki input const Vec4 colorBias

#pragma anki start vert
#include <shaders/ForwardShadingCommonVert.glsl>

layout(location = SCALE_LOCATION) in F32 in_scale;
layout(location = ALPHA_LOCATION) in F32 in_alpha;

layout(location = 0) flat out F32 out_alpha;
layout(location = 1) out Vec2 out_uv;
layout(location = 2) out Vec3 out_worldPos;

void main()
{
	out_uv = Vec2(gl_VertexID & 1, gl_VertexID >> 1);

	out_worldPos = cameraRotMat * Vec3((out_uv - 0.5) * in_scale, 0.0) + in_position;
	gl_Position = mvp * Vec4(out_worldPos, 1.0);

	out_alpha = in_alpha;
}
#pragma anki end

#pragma anki start frag
#include <shaders/ForwardShadingCommonFrag.glsl>

layout(location = 0) flat in F32 in_alpha;
layout(location = 1) in Vec2 in_uv;
layout(location = 2) in Vec3 in_worldPos;

void main()
{
#if ANIMATED_TEXTURE == 1
	Vec4 texCol = readAnimatedTextureRgba(diffuseMapArr, animationPeriod, in_uv, anki_u_time);
#else
	Vec4 texCol = texture(diffuseMap, in_uv);
#endif

#if LIGHT
	texCol.rgb = computeLightColorLow(texCol.rgb, in_worldPos);
#endif

	Vec4 colScale = colorScale;
	colScale.a *= in_alpha;
	particleAlpha(texCol, colScale, colorBias);
}
#pragma anki end
