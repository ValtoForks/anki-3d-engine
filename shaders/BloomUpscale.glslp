// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki input const UVec2 INPUT_TEX_SIZE
#pragma anki input const UVec2 WORKGROUP_SIZE
#pragma anki input const UVec2 FB_SIZE

#pragma anki start comp
#include <shaders/Common.glsl>

layout(local_size_x = WORKGROUP_SIZE.x, local_size_y = WORKGROUP_SIZE.y, local_size_z = 1) in;

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_tex;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2D u_lensDirtTex;

layout(ANKI_IMAGE_BINDING(0, 0)) writeonly uniform image2D out_img;

// Constants
const U32 MAX_GHOSTS = 4u;
const F32 GHOST_DISPERSAL = 0.7;
const F32 HALO_WIDTH = 0.4;
const F32 CHROMATIC_DISTORTION = 3.0;
#define ENABLE_CHROMATIC_DISTORTION 1
#define ENABLE_HALO 1
const F32 HALO_OPACITY = 0.5;

Vec3 textureDistorted(sampler2D tex,
	Vec2 uv,
	Vec2 direction, // direction of DISTORTION
	Vec3 DISTORTION) // per-channel DISTORTION factor
{
#if ENABLE_CHROMATIC_DISTORTION
	return Vec3(textureLod(tex, uv + direction * DISTORTION.r, 0.0).r,
		textureLod(tex, uv + direction * DISTORTION.g, 0.0).g,
		textureLod(tex, uv + direction * DISTORTION.b, 0.0).b);
#else
	return textureLod(tex, uv, 0.0).rgb;
#endif
}

Vec3 ssLensFlare(Vec2 uv)
{
	const Vec2 TEXEL_SIZE = 1.0 / Vec2(INPUT_TEX_SIZE);
	const Vec3 DISTORTION = Vec3(-TEXEL_SIZE.x * CHROMATIC_DISTORTION, 0.0, TEXEL_SIZE.x * CHROMATIC_DISTORTION);
	const F32 LEN_OF_HALF = length(Vec2(0.5));

	Vec2 flipUv = Vec2(1.0) - uv;

	Vec2 ghostVec = (Vec2(0.5) - flipUv) * GHOST_DISPERSAL;

	Vec2 direction = normalize(ghostVec);
	Vec3 result = Vec3(0.0);

	// sample ghosts:
	ANKI_UNROLL for(U32 i = 0u; i < MAX_GHOSTS; ++i)
	{
		Vec2 offset = fract(flipUv + ghostVec * F32(i));

		F32 weight = length(Vec2(0.5) - offset) / LEN_OF_HALF;
		weight = pow(1.0 - weight, 10.0);

		result += textureDistorted(u_tex, offset, direction, DISTORTION) * weight;
	}

	// Sample halo
#if ENABLE_HALO
	Vec2 haloVec = normalize(ghostVec) * HALO_WIDTH;
	F32 weight = length(Vec2(0.5) - fract(flipUv + haloVec)) / LEN_OF_HALF;
	weight = pow(1.0 - weight, 20.0);
	result += textureDistorted(u_tex, flipUv + haloVec, direction, DISTORTION) * (weight * HALO_OPACITY);
#endif

	// Lens dirt
	result *= textureLod(u_lensDirtTex, uv, 0.0).rgb;

	return result;
}

Vec3 upscale(Vec2 uv)
{
	Vec3 result = textureLod(u_tex, uv, 0.0).rgb;
	result += textureLodOffset(u_tex, uv, 0.0, ivec2(+1, +1)).rgb;
	result += textureLodOffset(u_tex, uv, 0.0, ivec2(+1, -1)).rgb;
	result += textureLodOffset(u_tex, uv, 0.0, ivec2(-1, -1)).rgb;
	result += textureLodOffset(u_tex, uv, 0.0, ivec2(-1, +1)).rgb;

	result *= (1.0 / 5.0);
	return result;
}

void main()
{
	if((FB_SIZE.x % WORKGROUP_SIZE.x) != 0u || (FB_SIZE.y % WORKGROUP_SIZE.y) != 0u) // This check is free
	{
		if(gl_GlobalInvocationID.x >= FB_SIZE.x || gl_GlobalInvocationID.y >= FB_SIZE.y)
		{
			return;
		}
	}

	Vec2 uv = (Vec2(gl_GlobalInvocationID.xy) + 0.5) / Vec2(FB_SIZE);

	Vec3 outColor = ssLensFlare(uv) + upscale(uv);
	imageStore(out_img, IVec2(gl_GlobalInvocationID.xy), Vec4(outColor, 0.0));
}
#pragma anki end
