<glue>
	<head><![CDATA[// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// WARNING: This file is auto generated.

#include <anki/script/LuaBinder.h>
#include <anki/script/ScriptManager.h>
#include <anki/Scene.h>

namespace anki {

template<typename T, typename... TArgs>
static T* newSceneNode(SceneGraph* scene, CString name, TArgs... args)
{
	T* ptr;
	Error err = scene->template newSceneNode<T>(
		name, ptr, args...);

	if(!err)
	{
		return ptr;
	}
	else
	{
		return nullptr;
	}
}

static SceneGraph* getSceneGraph(lua_State* l)
{
	LuaBinder* binder = nullptr;
	lua_getallocf(l, reinterpret_cast<void**>(&binder));

	ScriptManager* scriptManager =
		reinterpret_cast<ScriptManager*>(binder->getParent());

	return &scriptManager->getSceneGraph();
}]]></head>

	<classes>
		<class name="MoveComponent">
			<methods>
				<method name="setLocalOrigin">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
				<method name="getLocalOrigin">
					<return>const Vec4&amp;</return>
				</method>
				<method name="setLocalRotation">
					<args>
						<arg>const Mat3x4&amp;</arg>
					</args>
				</method>
				<method name="getLocalRotation">
					<return>const Mat3x4&amp;</return>
				</method>
				<method name="setLocalScale">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getLocalScale">
					<return>F32</return>
				</method>
				<method name="setLocalTransform">
					<args>
						<arg>const Transform&amp;</arg>
					</args>
				</method>
				<method name="getLocalTransform">
					<return>const Transform&amp;</return>
				</method>
			</methods>
		</class>
		<class name="LightComponent">
			<methods>
				<method name="setDiffuseColor">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
				<method name="getDiffuseColor">
					<return>const Vec4&amp;</return>
				</method>
				<method name="setRadius">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getRadius">
					<return>F32</return>
				</method>
				<method name="setDistance">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getDistance">
					<return>F32</return>
				</method>
				<method name="setInnerAngle">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getInnerAngle">
					<return>F32</return>
				</method>
				<method name="setOuterAngle">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getOuterAngle">
					<return>F32</return>
				</method>
				<method name="setShadowEnabled">
					<args>
						<arg>Bool</arg>
					</args>
				</method>
				<method name="getShadowEnabled">
					<return>Bool</return>
				</method>
			</methods>
		</class>
		<class name="DecalComponent">
			<methods>
				<method name="setDiffuseDecal">
					<args>
						<arg>CString</arg>
						<arg>CString</arg>
						<arg>F32</arg>
					</args>
					<return>Error</return>
				</method>
				<method name="setSpecularRoughnessDecal">
					<args>
						<arg>CString</arg>
						<arg>CString</arg>
						<arg>F32</arg>
					</args>
					<return>Error</return>
				</method>
				<method name="updateShape">
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>
		<class name="LensFlareComponent">
			<methods>
				<method name="setFirstFlareSize">
					<args>
						<arg>const Vec2&amp;</arg>
					</args>
				</method>
				<method name="setColorMultiplier">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
			</methods>
		</class>
		<class name="SceneNode">
			<methods>
				<method name="getName">
					<return>CString</return>
				</method>
				<method name="addChild">
					<args>
						<arg>SceneNode*</arg>
					</args>
				</method>
				<method name="tryGetComponent&lt;MoveComponent&gt;" alias="getMoveComponent">
					<return>MoveComponent*</return>
				</method>
				<method name="tryGetComponent&lt;LightComponent&gt;" alias="getLightComponent">
					<return>LightComponent*</return>
				</method>
				<method name="tryGetComponent&lt;LensFlareComponent&gt;" alias="getLensFlareComponent">
					<return>LensFlareComponent*</return>
				</method>
				<method name="tryGetComponent&lt;DecalComponent&gt;" alias="getDecalComponent">
					<return>DecalComponent*</return>
				</method>
			</methods>
		</class>
		<class name="ModelNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="PerspectiveCameraNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
				<method name="setAll">
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>
		<class name="PointLightNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
				<method name="loadLensFlare">
					<args>
						<arg>const CString&amp;</arg>
					</args>
					<return>Error</return>
				</method>
			</methods>
		</class>
		<class name="SpotLightNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="StaticCollisionNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="PortalNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="SectorNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="ParticleEmitterNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="ReflectionProbeNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="ReflectionProxyNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="OccluderNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="DecalNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="SceneGraph">
			<methods>
				<method name="newPerspectiveCameraNode">
					<overrideCall><![CDATA[PerspectiveCameraNode* ret = newSceneNode<PerspectiveCameraNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
					</args>
					<return>PerspectiveCameraNode*</return>
				</method>
				<method name="newModelNode">
					<overrideCall><![CDATA[ModelNode* ret = newSceneNode<ModelNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
					</args>
					<return>ModelNode*</return>
				</method>
				<method name="newPointLightNode">
					<overrideCall><![CDATA[PointLightNode* ret = newSceneNode<PointLightNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
					</args>
					<return>PointLightNode*</return>
				</method>
				<method name="newSpotLightNode">
					<overrideCall><![CDATA[SpotLightNode* ret = newSceneNode<SpotLightNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
					</args>
					<return>SpotLightNode*</return>
				</method>
				<method name="newStaticCollisionNode">
					<overrideCall><![CDATA[StaticCollisionNode* ret = newSceneNode<StaticCollisionNode>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
						<arg>const Transform&amp;</arg>
					</args>
					<return>StaticCollisionNode*</return>
				</method>
				<method name="newPortalNode">
					<overrideCall><![CDATA[PortalNode* ret = newSceneNode<PortalNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
					</args>
					<return>PortalNode*</return>
				</method>
				<method name="newSectorNode">
					<overrideCall><![CDATA[SectorNode* ret = newSceneNode<SectorNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
					</args>
					<return>SectorNode*</return>
				</method>
				<method name="newParticleEmitterNode">
					<overrideCall><![CDATA[ParticleEmitterNode* ret = newSceneNode<ParticleEmitterNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
					</args>
					<return>ParticleEmitterNode*</return>
				</method>
				<method name="newReflectionProbeNode">
					<overrideCall><![CDATA[ReflectionProbeNode* ret = newSceneNode<ReflectionProbeNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>F32</arg>
					</args>
					<return>ReflectionProbeNode*</return>
				</method>
				<method name="newReflectionProxyNode">
					<overrideCall><![CDATA[ReflectionProxyNode* ret = newSceneNode<ReflectionProxyNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
					</args>
					<return>ReflectionProxyNode*</return>
				</method>
				<method name="newOccluderNode">
					<overrideCall><![CDATA[OccluderNode* ret = newSceneNode<OccluderNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
					</args>
					<return>OccluderNode*</return>
				</method>
				<method name="newDecalNode">
					<overrideCall><![CDATA[DecalNode* ret = newSceneNode<DecalNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
					</args>
					<return>DecalNode*</return>
				</method>
				<method name="setActiveCameraNode">
					<args>
						<arg>SceneNode*</arg>
					</args>
				</method>
			</methods>
		</class>
	</classes>
	<functions>
		<function name="getSceneGraph">
			<overrideCall>SceneGraph* ret = getSceneGraph(l);</overrideCall>
			<return>SceneGraph*</return>
		</function>
	</functions>
	<tail><![CDATA[} // end namespace anki]]></tail>
</glue>

